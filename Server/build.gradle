plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' } /* For Stellar SDK dependencies */
}

dependencies {
    /* Stellar SDK */
    implementation 'com.github.stellar:java-stellar-sdk:0.37.0'

    /* Spring Boot */
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    /* Database */
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.liquibase:liquibase-core'

    /* HTTP Client (for Privy API integration) */
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    /* JWT for authentication */
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    /* Utilities */
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-io:commons-io:2.11.0'

    /* Lombok to reduce boilerplate */
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    /* Monitoring and metrics */
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    /* Testing */
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
}

test {
    useJUnitPlatform()
}

/**
 * Configuration for JAR packaging
 */
jar {
    enabled = false
}

/**
 * Configuration for building executable JAR
 */
bootJar {
    archiveFileName = "cryptowallet-backend.jar"
}

/**
 * Task to print the Java and dependency versions
 */
task printVersions {
    doLast {
        println "Java version: ${System.getProperty('java.version')}"
        println "Gradle version: ${gradle.gradleVersion}"
        println "Spring Boot version: ${org.springframework.boot.gradle.plugin.SpringBootPlugin.SPRING_BOOT_VERSION}"
    }
}